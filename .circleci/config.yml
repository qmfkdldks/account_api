version: 2.1
orbs:
  aws-cli: circleci/aws-cli@0.1.13
  aws-ecr: circleci/aws-ecr@6.2.0
  aws-ecs: circleci/aws-ecs@0.0.11
jobs:
  test:
    docker:
      - image: circleci/elixir:1.9.0
        environment:
          MIX_ENV: test
      - image: circleci/postgres:10.1-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: account_api_test
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "20:f4:f4:ae:3e:a6:f1:fb:a5:7b:25:4c:bc:cd:86:ba"
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote
      - restore_cache:
          keys:
            - v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
            - v1-mix-cache-{{ .Branch }}
            - v1-mix-cache

      - run: mix do local.hex --force, local.rebar --force
      - run: mix do deps.get, deps.compile
      - run: mix compile

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run: mix test

      - store_test_results:
          path: _build/test/lib/account_api       
  build_and_push_image:
    docker:
      - image: circleci/python:3.7.1
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "20:f4:f4:ae:3e:a6:f1:fb:a5:7b:25:4c:bc:cd:86:ba"
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote
      - setup_remote_docker
      - aws-ecr/build-image:
          repo: ${AWS_RESOURCE_NAME_PREFIX}
          tag: ${CIRCLE_SHA1}
          extra-build-args: "--build-arg DB_USER=${DB_USER} --build-arg DB_PASSWORD=${DB_PASSWORD} --build-arg DB_NAME=${DB_NAME} --build-arg DB_HOST=${DB_HOST} --build-arg DB_PORT=${DB_PORT} --build-arg APP_PORT=${APP_PORT} --build-arg APP_HOSTNAME=${APP_HOSTNAME} --build-arg SECRET_KEY_BASE=${SECRET_KEY_BASE} --build-arg AUTH_SECRET_KEY=${AUTH_SECRET_KEY}"
      - aws-cli/install
      - aws-ecr/ecr-login
      - aws-ecr/push-image:
          repo: ${AWS_RESOURCE_NAME_PREFIX}
          tag: ${CIRCLE_SHA1}
workflows:
  version: 2
  deploy:
    jobs:
      - build_and_push_image
      - aws-ecs/deploy-service-update:
          requires:
            - build_and_push_image
          aws-region: ${AWS_REGION}
          family: "${AWS_RESOURCE_NAME_PREFIX}-service"
          cluster-name: "${AWS_RESOURCE_NAME_PREFIX}-cluster"
          container-image-name-updates: "container=${AWS_RESOURCE_NAME_PREFIX}-service,image-and-tag=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:${CIRCLE_SHA1}"
          post-steps:
            - run:
                name: Test the deployment
                command: |
                  TARGET_GROUP_ARN=$(aws ecs describe-services --cluster ${AWS_RESOURCE_NAME_PREFIX}-cluster --services ${AWS_RESOURCE_NAME_PREFIX}-service | jq -r '.services[0].loadBalancers[0].targetGroupArn')
                  ELB_ARN=$(aws elbv2 describe-target-groups --target-group-arns $TARGET_GROUP_ARN | jq -r '.TargetGroups[0].LoadBalancerArns[0]')
                  ELB_DNS_NAME=$(aws elbv2 describe-load-balancers --load-balancer-arns $ELB_ARN | jq -r '.LoadBalancers[0].DNSName')
                  curl -s --retry 10 http://$ELB_DNS_NAME | grep "Welcome to nginx!"
